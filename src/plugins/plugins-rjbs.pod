=author RJBS

=plugin AutoVersion
core version-provider

This provides a version number derived from the current date.  You
should consider using a newer plugin like
L<Git::NextVersion|Dist::Zilla::Plugin::Git::NextVersion> instead,
because the versions generated by this plugin are hard for people to
read and compare.


=for deprecated
=plugin BumpVersion
core


=plugin CheckPrereqsIndexed
before-release prereqs

This plugin will check every required package against the CPAN index
to ensure that they're all real, installable packages.  If any are
unknown, it will prompt the user to continue or abort.  This is
especially useful if you're using
L<AutoPrereqs|Dist::Zilla::Plugin::AutoPrereqs>, as it can be a little
overzealous on occasion.


=plugin CPANFile
core file-gatherer metadata

Creates a L<cpanfile|https://github.com/miyagawa/cpanfile> listing
your distribution's prerequisites.


=plugin ConfirmRelease
core before-release

This plugin displays the name of the distribution tarball about to be
released, and asks you if you really mean to release it.


=plugin DistINI
core minting

This plugin produces a bare-bones F<dist.ini> file in a new dist.
You probably want to use a F<dist.ini> template along with
L<GatherDir::Template|Dist::Zilla::Plugin::GatherDir::Template>
instead of this.


=plugin ExecDir
core scripts install

Use this plugin if your distribution includes scripts that should be
installed along with your modules.


=plugin ExtraTests
core tests tests-extra file-munger

This plugin moves tests from the F<xt/> directory to the F<t/>
directory and rewrites them to skip unless the appropriate environment
variable is set during testing.


=plugin FakeRelease
core releaser

This does nothing but log a message saying the dist was fake released.
It's primarily used for testing Dist::Zilla plugins, but it can also
be used by authors who don't want to use any of the other releasers.


=for internal
=plugin FinderCode
core

=comment NEED DESCRIPTION


=plugin GatherDir
core file-gatherer

This gathers up all the files in a directory (unless they match its
skip regex).


=plugin GatherDir::Template
core file-gatherer minting template

This subclass of L<GatherDir|Dist::Zilla::Plugin::GatherDir> feeds the
gathered files through L<Text::Template>.

It is meant to be used when minting dists with C<dzil new>, but could be used
in building existing dists, too.


=plugin GenerateFile
core file-gatherer template

This plugin allows you to create a short file directly from its
config, which may include L<Text::Template> processing.


=plugin InlineFiles
core file-gatherer for-subclassing

This plugin exists only to be a base class for plugins that want to
generate files.


=plugin License
core file-gatherer documentation metadata

This plugin adds a F<LICENSE> file containing the full text of the
distribution's license, as produced by the C<fulltext> method of the
dist's L<Software::License> object.


=plugin MakeMaker
core install tests

This plugin generates a standard F<Makefile.PL> for your distribution.
It also includes L<MakeMaker::Runner|Dist::Zilla::Plugin::MakeMaker::Runner>
to build your distribution and run its tests.


=plugin MakeMaker::Runner
core tests

This is the part of the L<MakeMaker|Dist::Zilla::Plugin::MakeMaker>
plugin that knows how to build your distribution and run its tests
using F<Makefile.PL>.  You wouldn't normally include it directly.


=plugin ManifestSkip
core file-pruner manifest

This plugin prunes files using the rules from a F<MANIFEST.SKIP> file
in the same format that MakeMaker and Module::Build use.

This plugin is for people who like to keep the list of pruned files in
a separate file.  If you prefer to keep that in F<dist.ini>, use
L<PruneFiles|Dist::Zilla::Plugin::PruneFiles>.


=plugin Manifest
core file-gatherer manifest metadata

This plugin creates a F<MANIFEST> file that lists all the files
gathered by Dist::Zilla.

=plugin MetaConfig
core metadata

This plugin adds a top-level C<x_Dist_Zilla> key to your
distribution's metadata that records the Dist::Zilla version used to
build your distribution as well as all the plugins used.


=plugin MetaJSON
core file-gatherer metadata

This plugin creates a F<META.json> file with your distribution's metadata.


=plugin MetaNoIndex
core metadata

This plugin allows you to prevent PAUSE/CPAN from indexing things you don't
want indexed.  This is useful if you build test classes or example classes
that are used for those purposes only, and are not part of the distribution.
It does this by adding a C<no_index> block to your F<META.json> (or
F<META.yml>) file in your distribution.


=plugin MetaResources
core metadata

This plugin allows you to add entries to the C<resources> key of your
distribution's metadata.


=plugin MetaTests
core file-gatherer tests tests-extra

This adds F<xt/release/meta-yaml.t> to your distribution, which is a
standard L<Test::CPAN::Meta> test.


=plugin MetaYAML
core file-gatherer metadata

This plugin creates a F<META.yml> file with your distribution's metadata.


=plugin ModuleBuild
core file-gatherer install tests

This plugin generates a standard F<Build.PL> for your distribution.
It also knows how to build your distribution and run its tests using
F<Build.PL>.


=plugin ModuleShareDirs
core install

This plugin lets you install a directory's contents as module-level
shared data files (to use with C<module_file> from L<File::ShareDir>).


=plugin NextRelease
core file-munger after-release changelog

This plugin automatically inserts the version number and release date
into your F<Changes> when you make a release.


=plugin PkgDist
core file-munger metadata

Insert a C<$DIST> variable with the name of the distribution after
each C<package> statement in the form

    {
      $Your::Package::Submodule::DIST = 'Your-Package';
    }

The C<$DIST> variable is not an official standard, and is not
currently used by the module toolchain.


=plugin PkgVersion
core file-munger version version-insert

Insert a version number after each C<package> statement in the form

    {
      $Your::Package::VERSION = '1.234';
    }

=plugin PodCoverageTests
core file-gatherer tests tests-extra

This adds F<xt/release/pod-coverage.t> to your distribution, which is
a standard L<Test::Pod::Coverage> test using
L<Pod::Coverage::TrustPod>.


=plugin PodSyntaxTests
core file-gatherer tests tests-extra

This adds F<xt/release/pod-syntax.t> to your distribution, which is a
standard L<Test::Pod> test.


=plugin PodVersion
core file-munger documentation version-insert

This plugin adds a C<=head1 VERSION> section to most Perl files in the
distribution, indicating the version of the dist being built.  This section is
added after C<=head1 NAME>.  If there is no such section, the version section
will not be added.

People using L<Pod::Weaver> or L<Pod::Loom> won't need this plugin.


=plugin Prereqs
core prereqs

This plugin allows you to declare your distribution's prerequisites in
your F<dist.ini>.


=plugin PruneCruft
core file-pruner

This plugin removes files commonly added by the toolchain that should
not be included in your distribution.  It I<does not> remove things
like backup files created by your text editor.


=plugin PruneFiles
core file-pruner

This plugin allows you to explicitly prune some files from your
distribution. You can either specify the exact set of files (with the
"filenames" parameter) or provide the regular expressions to
check (using "match").

This plugin is for people who like to keep the list of pruned files in
F<dist.ini>.  If you prefer to use a separate file for that, use
L<ManifestSkip|Dist::Zilla::Plugin::ManifestSkip>.


=plugin Readme
core file-gatherer documentation

This plugin adds a very simple F<README> file to the distribution,
citing the dist's name, version, abstract, and license.  It may be
more useful or informative in the future.


=plugin RemovePrereqs
core prereqs

This will remove any mention of specified modules from your
distribution's prerequisites.  This is useful for eliminating
incorrectly detected prereqs.


=plugin ShareDir
core

This plugin lets you install a directory's contents as dist-level
shared data files (to use with C<dist_file> from L<File::ShareDir>).


=plugin TemplateModule
core minting template

This is a L<ModuleMaker|Dist::Zilla::Role::ModuleMaker> used for
creating new Perl modules files when minting a new dist with
S<C<dzil new>>.


=plugin UploadToCPAN
core releaser

This plugin will upload your distribution to the CPAN.
