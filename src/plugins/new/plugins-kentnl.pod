=author KENTNL

=plugin >dumpphases
command

Working out what Plugins will execute in which order during which phase can
be a little confusing sometimes.

=plugin >listdeps_darkpan
command

List DarkPAN dependencies

=plugin AutoVersion::Relative
template version version-provider

Time-Relative versioning

=plugin Bootstrap::lib

This module does the very simple task of injecting the distributions 'lib'
directory into @INC at the point of its inclusion, so that you can use
plug-ins you're writing for L<< C<Dist::Zilla>|Dist::Zilla >>, to release
the plug-in itself.

=plugin Git::Remote::Check
before-release git version-control

Ensure no pending commits on a remote branch before release

=plugin Git::Remote::Check::BeforeBuild
git version-control

Ensure no pending commits on a remote branch before build

=plugin Git::Remote::Update
before-release git version-control

Update a remote with Git before release.

=plugin Git::Remote::Update::BeforeBuild
git version-control

Update a remote with Git before build.

=plugin MetaData::BuiltWith
metadata

Often, distribution authors get module dependencies wrong. So in such
cases, its handy to be able to see what version of various packages they
built with.

=plugin MetaData::BuiltWith::All

This further extends the verbosity of the information reported by the L<<
C<BuiltWith>|Dist::Zilla::Plugin::MetaData::BuiltWith >> plug-in, by
recursively rooting around in the name-spaces and reporting every version
of everything it finds.

=plugin MetaProvides

This Distribution Contains a small bundle of plugins for various ways of
populating the C<META.yml> that is built with your distribution.

=plugin MetaProvides::Class

Scans Dist::Zilla's .pm files and tries to identify classes using
Class::Discover.

=plugin MetaProvides::FromFile

In the event nothing else works, pull in hand-crafted metadata from a
specified file.

=plugin MetaProvides::Package

Extract namespaces/version from traditional packages for provides

=plugin ModuleInstall
install prereqs template

This module will create a F<Makefile.PL> for installing the dist using
L<Module::Install>.

=plugin Prereqs::DarkPAN

Depend on things from arbitrary places-not-CPAN